AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Tags:
      - Key: Name
        Value: willDeBerry-lambdaRole
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Fn::GetAtt:
              - Lambda
              - Arn
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: willdeberry-bucket
        S3Key: 78fefdc3540417c063d0eaed356e5905
      FunctionName: willDeBerry-lambda
      Handler: lambda-code.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Runtime: python3.9
      Tags:
      - Key: Name
        Value: willDeBerry-lambda
  LambdaPerm:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Lambda
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: willDeBerry-api
      Tags:
      - Key: Name
        Value: willDeBerry-restapi
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        Credentials:
          Fn::GetAtt:
          - ApiGatewayRole
          - Arn
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
      ResourceId:
        Ref: ApiResource
      RestApiId:
        Ref: ApiGatewayRestApi
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId:
        Ref: ApiGatewayRestApi
Outputs:
  ResourceID:
    Value:
      Ref: ApiResource
  RestApiID:
    Value:
      Ref: ApiGatewayRestApi
